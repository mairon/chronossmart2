<%  vendedor = "AND V.VENDEDOR_ID = #{params[:busca]["vendedor"]}" unless params[:busca]["vendedor"].blank? %>
<% sql = "WITH
  -- Reutilização de parâmetros de data
  date_params AS (
    SELECT
      '#{params[:inicio].split("/").reverse.join("-")}'::date AS data_inicio,
      '#{params[:final].split("/").reverse.join("-")}'::date AS data_final
  ),

  -- CTE para custos médios (evita repetição da subquery)
  custos_medios AS (
    SELECT DISTINCT
      ss.produto_id,
      ss.deposito_id,
      ss.data,
      ss.promedio_guarani,
      ROW_NUMBER() OVER (
        PARTITION BY ss.produto_id, ss.deposito_id
        ORDER BY ss.data DESC, ss.tabela_id DESC
      ) as rn
    FROM stocks ss
    WHERE ss.status = 0
      AND ss.data <= (SELECT data_final FROM date_params)
  ),

  -- Função para obter custo médio
  custo_medio_func AS (
    SELECT
      produto_id,
      deposito_id,
      promedio_guarani as custo_medio_gs
    FROM custos_medios
    WHERE rn = 1
  )

-- COBROS (CB•)
SELECT
  'CB•' AS sigla_proc,
  cd.cobro_id,
  cd.documento_numero,
  cd.venda_id,
  cd.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade,
  vp.unitario_guarani,
  vp.total_guarani,
  cd.saldo_perc,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM vendas_produtos vp
  INNER JOIN cobros_detalhes cd ON cd.venda_id = vp.venda_id
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE cd.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id <> 32
  #{vendedor}

UNION ALL

-- VENDAS DIRETAS (VD•)
SELECT
  'VD•' AS sigla_proc,
  vp.venda_id AS cobro_id,
  v.documento_numero,
  vp.venda_id,
  v.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade,
  vp.unitario_guarani,
  vp.total_guarani,
  100 AS saldo_perc,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM vendas_produtos vp
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE v.tipo = 0
  AND EXISTS (SELECT 1 FROM vendas_financas vf WHERE vf.venda_id = v.id)
  AND v.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id <> 32
  #{vendedor}

UNION ALL

-- NOTAS DE CRÉDITO (NC•)
SELECT
  'NC•' AS sigla_proc,
  vp.nota_credito_id AS cobro_id,
  cd.documento_numero,
  cd.venda_id,
  cd.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade * -1 AS quantidade,
  vp.unitario_guarani * -1 AS unitario_guarani,
  vp.total_guarani * -1 AS total_guarani,
  cd.saldo_perc,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM nota_creditos_detalhes vp
  INNER JOIN cobros_detalhes cd ON cd.venda_id = vp.venda_id
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE cd.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id <> 32
  #{vendedor}

ORDER BY vendedor_id, venda_id;"

lista_cobros = CobrosDetalhe.find_by_sql(sql)
%>


<table>

	<thead class="report-header">
  <tr>
    <td colspan="11" class="title" align="center">
      <%= current_unidade.nome_sys %> <br>
      LISTADO COMISIÓN
    </td>
  </tr>
  <tr>
    <td colspan="11">Fecha: <%= params[:inicio] %> hasta <%= params[:final] %></td>
  </tr>

  <tr class="td-header">

    <td width="50">Cobro</td>
    <td width="50">Fecha</td>
    <td width="200">Cliente</td>
    <td width="250">Cobro</td>
    <td align="right" width="60">Ctd</td>
    <td align="right" width="70">Unit</td>
    <td align="right" width="70">Tot</td>
    <td align="right" width="60">% Cobrado</td>
    <td align="right" width="70">Tot Prop.</td>
    <td align="right" width="70">CMV</td>
    <td align="right" width="70">Margen</td>
    <td align="right" width="70">% Renta.</td>
  </tr>
</thead>

	<% quebra = "" %>
	<% sub_tot = 0 %>
	<% sub_cmv = 0 %>
	<% sub_qtd = 0 %>
	<% sub_tot_c = 0 %>

	<% tot   = 0 %>
	<% cmv   = 0 %>
	<% qtd   = 0 %>
	<% tot_c = 0 %>

<% lista_cobros.each do |lc| %>

  <% if quebra !=  lc.vendedor_nome %>
    <% if quebra != "" %>
		  <tr class="head">
		    <td colspan="4">Sub Total</td>
		    <td align="right"><%= format_int(sub_qtd) %></td>
		    <td></td>
		    <td align="right"><%= format_int(sub_tot) %></td>
		    <td></td>
		    <td></td>
		    <td align="right"><%= format_int(sub_cmv) %></td>
		    <td align="right"><%= format_int(sub_tot_c) %></td>
		    <td align="right"><%= format_decimal( (sub_tot_c.to_f * 100) / sub_cmv.to_f) %>%</td>
		  </tr>

		  <tr class="head td-header">
		  	<td colspan="10" align="right">
		  		Comissión <%= quebra %>
		  		<%=
						case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
						when 0..10 then
						  '1.5%'
						when 10..20 then
						  '2.3%'
						when 20..30 then
							'3%'
						when 30..40 then
							'3.2%'
						else
							'3.5%'
						end
		  	%>

				</td>
		  	<td align="right">
		  		<%=
						case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
						when 0..10 then
						   format_int(sub_tot_c.to_f * (0.015))
						when 10..20 then
						  format_int(sub_tot_c.to_f * (0.023))
						when 20..30 then
						  format_int(sub_tot_c.to_f * (0.03))
						when 30..40 then
						  format_int(sub_tot_c.to_f * (0.032))
						else
						  format_int(sub_tot_c.to_f * (0.035))
						end
		  	%>

		  	</td>
		  </tr>
      <% sub_qtd   = 0 %>
      <% sub_tot   = 0 %>
      <% sub_tot_c = 0 %>
      <% sub_cmv = 0 %>

    <% end %>
    <tr>
      <td class="head" colspan="10"><%= quebra = lc.vendedor_nome %>
    </tr>
  <% end %>

	<tr class = "<%= cycle( "cor1", "cor2" )%>">
		<td width="50" align="cented"><%= lc.sigla_proc %><%= lc.cobro_id.to_s.rjust(6,'0') %></td>
		<td width="50" align="cented"><%= lc.data.strftime("%d/%m/%y") %></td>
		<td width="200"><small><%= lc.persona_nome %></small></td>
		<td width="250"><small><%= lc.produto_nome %></small></td>
		<td width="60" align="right"><%= format_decimal(lc.quantidade) %></td>
		<td width="70" align="right"><%= format_int(lc.unitario_guarani) %></td>
		<td width="70" align="right"><%= format_int(lc.total_guarani) %></td>
		<td width="60" align="right"><%= format_decimal(lc.saldo_perc) %>%</td>
		<td width="70" align="right"><%= format_int(lc.total_guarani.to_f  * (lc.saldo_perc.to_f / 100) ) %></td>
		<td width="70" align="right"><%= format_int( (lc.quantidade.to_f * lc.custo_medio_gs.to_f) * (lc.saldo_perc.to_f / 100) ) %></td>
		<td width="70" align="right"><%= format_int(marg_gs = ((lc.total_guarani.to_f - (lc.quantidade.to_f * lc.custo_medio_gs.to_f) ) * (lc.saldo_perc.to_f / 100) )  )  %></td>
		<td width="70" align="right"><%= format_decimal( (marg_gs * 100) / ((lc.quantidade.to_f * lc.custo_medio_gs.to_f) * (lc.saldo_perc.to_f / 100))  )  %>%</td>

		<% sub_tot   += (lc.total_guarani.to_f) %>
		<% sub_qtd   += lc.quantidade.to_f %>
		<% sub_tot_c += marg_gs.to_f %>
		<% sub_cmv   += (lc.quantidade.to_f * lc.custo_medio_gs.to_f) * (lc.saldo_perc.to_f / 100) %>

		<% tot   += (lc.total_guarani.to_f) %>
		<% qtd   += lc.quantidade.to_f %>
		<% tot_c += marg_gs.to_f %>
		<% cmv   += (lc.quantidade.to_f * lc.custo_medio_gs.to_f) * (lc.saldo_perc.to_f / 100) %>

	</tr>
<% end %>
  <tr class="head">
    <td colspan="4">Sub Total</td>
    <td align="right"><%= format_int(sub_qtd) %></td>
    <td></td>
    <td align="right"><%= format_int(sub_tot) %></td>
    <td></td>
    <td></td>
    <td align="right"><%= format_int(sub_cmv) %></td>
    <td align="right"><%= format_int(sub_tot_c) %></td>
    <td align="right"><%= format_decimal( (sub_tot_c.to_f * 100) / sub_cmv.to_f) %>%</td>
  </tr>

  <tr class="head td-header">
  	<td colspan="10" align="right">
  		Comissión <%= quebra %>
  		<%=
				case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
				when 0..10 then
				  '1.5%'
				when 10..20 then
				  '2.3%'
				when 20..30 then
					'3%'
				when 30..40 then
					'3.2%'
				else
					'3.5%'
				end
  	%>

		</td>
  	<td align="right">
  		<%=
				case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
				when 0..10
				   format_int(sub_tot_c.to_f * (0.015))
				when 10..20
				  format_int(sub_tot_c.to_f * (0.023))
				when 20..30
				  format_int(sub_tot_c.to_f * (0.03))
				when 30..40
				  format_int(sub_tot_c.to_f * (0.032))
				else
				  format_int(sub_tot_c.to_f * (0.035))
				end
  	%>

  	</td>
  </tr>

  <tr class="head">
    <td colspan="4">Total</td>
    <td align="right"><%= format_int(qtd) %></td>
    <td></td>
    <td align="right"><%= format_int(tot) %></td>
    <td></td>
    <td></td>
    <td align="right"><%= format_int(cmv) %></td>
    <td align="right"><%= format_int(tot_c) %></td>
    <td align="right"><%= format_decimal( (tot_c.to_f * 100) / cmv.to_f) %>%</td>
  </tr>
</table>


<h2>Vendedor Externo</h2>




<%  vendedor = "AND V.VENDEDOR_ID = #{params[:busca]["vendedor"]}" unless params[:busca]["vendedor"].blank? %>
<% sql = "WITH
  -- Reutilização de parâmetros de data
  date_params AS (
    SELECT
      '#{params[:inicio].split("/").reverse.join("-")}'::date AS data_inicio,
      '#{params[:final].split("/").reverse.join("-")}'::date AS data_final
  ),

  -- CTE para custos médios (evita repetição da subquery)
  custos_medios AS (
    SELECT DISTINCT
      ss.produto_id,
      ss.deposito_id,
      ss.data,
      ss.promedio_guarani,
      ROW_NUMBER() OVER (
        PARTITION BY ss.produto_id, ss.deposito_id
        ORDER BY ss.data DESC, ss.tabela_id DESC
      ) as rn
    FROM stocks ss
    WHERE ss.status = 0
      AND ss.data <= (SELECT data_final FROM date_params)
  ),

  -- Função para obter custo médio
  custo_medio_func AS (
    SELECT
      produto_id,
      deposito_id,
      promedio_guarani as custo_medio_gs
    FROM custos_medios
    WHERE rn = 1
  )

-- COBROS (CB•)
SELECT
  'CB•' AS sigla_proc,
  cd.cobro_id,
  cd.documento_numero,
  cd.venda_id,
  cd.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade,
  vp.unitario_guarani,
  vp.total_guarani,
  cd.saldo_perc,
  p.grupo_id,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM vendas_produtos vp
  INNER JOIN cobros_detalhes cd ON cd.venda_id = vp.venda_id
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  INNER JOIN PRODUTOS P ON P.ID = VP.PRODUTO_ID
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE cd.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id = 32
  #{vendedor}

UNION ALL

-- VENDAS DIRETAS (VD•)
SELECT
  'VD•' AS sigla_proc,
  vp.venda_id AS cobro_id,
  v.documento_numero,
  vp.venda_id,
  v.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade,
  vp.unitario_guarani,
  vp.total_guarani,
  100 AS saldo_perc,
  p.grupo_id,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM vendas_produtos vp
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  INNER JOIN PRODUTOS P ON P.ID = VP.PRODUTO_ID
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE v.tipo = 0
  AND EXISTS (SELECT 1 FROM vendas_financas vf WHERE vf.venda_id = v.id)
  AND v.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id = 32
  #{vendedor}

UNION ALL

-- NOTAS DE CRÉDITO (NC•)
SELECT
  'NC•' AS sigla_proc,
  vp.nota_credito_id AS cobro_id,
  cd.documento_numero,
  cd.venda_id,
  cd.data,
  v.vendedor_id,
  pv.nome AS vendedor_nome,
  v.persona_nome,
  vp.produto_id,
  vp.produto_nome,
  vp.quantidade * -1 AS quantidade,
  vp.unitario_guarani * -1 AS unitario_guarani,
  vp.total_guarani * -1 AS total_guarani,
  cd.saldo_perc,
  p.grupo_id,
  COALESCE(cm.custo_medio_gs, 0) AS custo_medio_gs
FROM nota_creditos_detalhes vp
  INNER JOIN cobros_detalhes cd ON cd.venda_id = vp.venda_id
  INNER JOIN vendas v ON v.id = vp.venda_id
  INNER JOIN personas pv ON pv.id = v.vendedor_id
  INNER JOIN PRODUTOS P ON P.ID = VP.PRODUTO_ID
  LEFT JOIN custo_medio_func cm ON cm.produto_id = vp.produto_id
    AND cm.deposito_id = vp.deposito_id
  CROSS JOIN date_params dp
WHERE cd.data BETWEEN dp.data_inicio AND dp.data_final
  AND v.vendedor_id = 32
  #{vendedor}

ORDER BY vendedor_id, venda_id;"

lista_cobros_externo = CobrosDetalhe.find_by_sql(sql)
%>



<table>

	<thead class="report-header">
  <tr>
    <td colspan="11" class="title" align="center">
      <%= current_unidade.nome_sys %> <br>
      LISTADO COMISIÓN
    </td>
  </tr>
  <tr>
    <td colspan="11">Fecha: <%= params[:inicio] %> hasta <%= params[:final] %></td>
  </tr>

  <tr class="td-header">

    <td width="50">Cobro</td>
    <td width="50">Fecha</td>
    <td width="200">Cliente</td>
    <td width="250">Cobro</td>
    <td align="right" width="60">Ctd</td>
    <td align="right" width="70">Unit</td>
    <td align="right" width="70">Tot</td>
    <td align="right" width="60">% Cobrado</td>
    <td align="right" width="70">Tot Prop.</td>
    <td align="right" width="70">CMV</td>
    <td align="right" width="70">Margen</td>
    <td align="right" width="70">% Renta.</td>
  </tr>
</thead>

	<% quebra = "" %>
	<% sub_tot = 0 %>
	<% sub_cmv = 0 %>
	<% sub_qtd = 0 %>
	<% sub_tot_c = 0 %>
	<% sub_tot_m = 0 %>
	<% sub_tot_bruto = 0 %>

	<% tot   = 0 %>
	<% cmv   = 0 %>
	<% qtd   = 0 %>
	<% tot_c = 0 %>
	<% tot_m = 0 %>
	<% tot_bruto = 0 %>

<% lista_cobros_externo.each do |lc| %>

  <% if quebra !=  lc.vendedor_nome %>
    <% if quebra != "" %>
		  <tr class="head">
		    <td colspan="4">Sub Total</td>
		    <td align="right"><%= format_int(sub_qtd) %></td>
		    <td></td>
		    <td align="right"><%= format_int(sub_tot) %></td>
		    <td></td>
		    <td align="right"><%= format_int(sub_cmv) %></td>
		    <td align="right"><%= format_int(sub_tot_c) %></td>
		    <td align="right"><%= format_decimal( (sub_tot_c.to_f * 100) / sub_cmv.to_f) %>%</td>
		  </tr>

		  <tr class="head td-header">
		  	<td colspan="10" align="right">
		  		Comissión <%= quebra %>
		  		<%=
						case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
						when 0..10 then
						  '1.5%'
						when 10..20 then
						  '2.3%'
						when 20..30 then
							'3%'
						when 30..40 then
							'3.2%'
						else
							'3.5%'
						end
		  	%>
				</td>

		  	<td align="right">
		  		<%=
						case ((sub_tot_c.to_f * 100) / sub_cmv.to_f)
						when 0..10 then
						   format_int(sub_tot_c.to_f * (0.015))
						when 10..20 then
						  format_int(sub_tot_c.to_f * (0.023))
						when 20..30 then
						  format_int(sub_tot_c.to_f * (0.03))
						when 30..40 then
						  format_int(sub_tot_c.to_f * (0.032))
						else
						  format_int(sub_tot_c.to_f * (0.035))
						end
		  	%>

		  	</td>
		  </tr>
      <% sub_qtd   = 0 %>
      <% sub_tot   = 0 %>
      <% sub_tot_c = 0 %>
      <% sub_cmv = 0 %>

    <% end %>
    <tr>
      <td class="head" colspan="10"><%= quebra = lc.vendedor_nome %>
    </tr>
  <% end %>

	<tr class = "<%= cycle( "cor1", "cor2" )%>">
		<td width="50" align="cented"><%= lc.sigla_proc %><%= lc.cobro_id.to_s.rjust(6,'0') %></td>
		<td width="50" align="cented"><%= lc.data.strftime("%d/%m/%y") %></td>
		<td width="200"><small><%= lc.persona_nome %></small></td>
		<td width="250"><small><%= lc.grupo_id %><%= lc.produto_nome %></small></td>
		<td width="60" align="right"><%= format_decimal(lc.quantidade) %></td>
		<td width="70" align="right"><%= format_int(lc.unitario_guarani) %></td>
		<td width="70" align="right"><%= format_int(lc.total_guarani) %></td>
		<td width="60" align="right"><%= format_decimal(lc.saldo_perc) %>%</td>
		<td width="70" align="right"><%= format_int(lc.total_guarani.to_f * (lc.saldo_perc.to_f / 100) ) %></td>
		<td width="70" align="right"><%= format_int(lc.quantidade.to_f * lc.custo_medio_gs.to_f ) %></td>
		<td width="70" align="right"><%= format_int(marg_gs = ((lc.total_guarani.to_f - (lc.quantidade.to_f * lc.custo_medio_gs.to_f) ) * (lc.saldo_perc.to_f / 100) )  )  %></td>
		<td width="70" align="right"><%= format_decimal( (marg_gs * 100) / (lc.quantidade.to_f * lc.custo_medio_gs.to_f)  )  %>%</td>

		<% sub_tot   += (lc.total_guarani.to_f) %>
		<% sub_qtd   += lc.quantidade.to_f %>
		<% sub_tot_c += (lc.total_guarani.to_f * (lc.saldo_perc.to_f / 100)) %>
		<% sub_tot_m += marg_gs.to_f %>

		<% if lc.grupo_id.to_i == 7 %>
			<!--separa as comissoes do grupo bruto !-->
			<% sub_tot_bruto += (lc.total_guarani.to_f * (lc.saldo_perc.to_f / 100)) %>
			<% tot_bruto += (lc.total_guarani.to_f * (lc.saldo_perc.to_f / 100)) %>
		<% end %>

		<% sub_cmv   += (lc.quantidade.to_f * lc.custo_medio_gs.to_f) %>

		<% tot   += (lc.total_guarani.to_f) %>
		<% qtd   += lc.quantidade.to_f %>
		<% tot_c += (lc.total_guarani.to_f * (lc.saldo_perc.to_f / 100)) %>
		<% tot_m += marg_gs.to_f %>
		<% cmv   += (lc.quantidade.to_f * lc.custo_medio_gs.to_f) %>

	</tr>
<% end %>
  <tr class="head">
    <td colspan="4">Sub Total</td>
    <td align="right"><%= format_int(sub_qtd) %></td>
    <td></td>
    <td align="right"><%= format_int(sub_tot) %></td>
    <td></td>
    <td align="right"><%= format_int(sub_tot_c) %></td>
    <td align="right"><%= format_int(sub_cmv) %></td>
    <td align="right"><%= format_int(sub_tot_m) %></td>
    <td align="right"><%= format_decimal( (sub_tot_m.to_f * 100) / sub_cmv.to_f) %>%</td>
  </tr>

  <tr class="head td-header">
  	<td colspan="10" align="right">
  		Comissión <%= quebra %> 3% de <%= format_int((sub_tot_c.to_f - sub_tot_bruto.to_f)) %>
		</td>
  	<td align="right">
  		<%= format_int( (sub_tot_c.to_f - sub_tot_bruto.to_f) * (0.03)) %>
  	</td>
  </tr>

  <tr class="head td-header">
  	<td colspan="10" align="right">
  		Comissión CEMENTOS Y MATERIALES BRUTO <%= quebra %> 0.05% de <%= format_int((sub_tot_bruto.to_f)) %>
		</td>
  	<td align="right">
  		<%= format_int(sub_tot_bruto.to_f * (0.005)) %>
  	</td>
  </tr>

  <tr class="head">
    <td colspan="4">Total</td>
    <td align="right"><%= format_int(qtd) %></td>
    <td></td>
    <td align="right"><%= format_int(tot) %></td>
    <td></td>
    <td align="right"><%= format_int(tot_c) %></td>
    <td align="right"><%= format_int(cmv) %></td>
    <td align="right"><%= format_int(tot_m) %></td>
    <td align="right"><%= format_decimal( (tot_c.to_f * 100) / cmv.to_f) %>%</td>
  </tr>
</table>
