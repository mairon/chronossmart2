<script type="text/javascript" src="/qz-v2/js/qz-tray.js"></script>

<!-- Required scripts -->
<script type="text/javascript" src="/qz-v2/js/sample/promise-polyfill-8.1.3.min.js"></script>
<script type="text/javascript" src="/qz-v2/js/sample/whatwg-fetch-3.0.0.min.js"></script>
<script type="text/javascript" src="/qz-v2/js/sample/padstart-pollyfill.js"></script>
<script type="text/javascript" src="/qz-v2/js/sample/array-from-pollyfill.js"></script>

<script>
  qz.websocket.connect();

  qz.security.setCertificatePromise(function(resolve, reject) {
     fetch("/qz/assets/signing/digital-certificate.txt", {cache: 'no-store', headers: {'Content-Type': 'text/plain'}})
        .then(function(data) { data.ok ? resolve(data.text()) : reject(data.text()); });
  });


    /// Connection ///
    function launchQZ() {
        if (!qz.websocket.isActive()) {
            window.location.assign("qz:launch");
            //Retry 5 times, pausing 1 second between each attempt
            startConnection({ retries: 5, delay: 1 });
        }
    }

    function startConnection(config) {
        var host = $('#connectionHost').val().trim();
        var usingSecure = $("#connectionUsingSecure").prop('checked');

        // Connect to a print-server instance, if specified
        if (host != "" && host != 'localhost') {
            if (config) {
                config.host = host;
                config.usingSecure = usingSecure;
            } else {
                config = { host: host, usingSecure: usingSecure };
            }
        }

        if (!qz.websocket.isActive()) {
            updateState('Waiting', 'default');

            qz.websocket.connect(config).then(function() {
                updateState('Active', 'success');
                findVersion();
            }).catch(handleConnectionError);
        } else {
            displayMessage('An active connection with QZ already exists.', 'alert-warning');
        }
    }

    function endConnection() {
        if (qz.websocket.isActive()) {
            qz.websocket.disconnect().then(function() {
                updateState('Inactive', 'default');
            }).catch(handleConnectionError);
        } else {
            displayMessage('No active connection with QZ exists.', 'alert-warning');
        }
    }


    function listNetworkDevices() {
        var listItems = function(obj) {
            var html = '';
            var labels = { mac: 'MAC', ip: 'IP', up: 'Up', ip4: 'IPv4', ip6: 'IPv6', primary: 'Primary' };

            Object.keys(labels).forEach(function(key) {
                if (!obj.hasOwnProperty(key)) { return; }
                if (key !== 'ip' && obj[key] == obj['ip']) { return; }

                var value = obj[key];
                if (key === 'mac') { value = obj[key].match(/.{1,2}/g).join(':'); }
                if (typeof obj[key] === 'object') { value = value.join(', '); }

                html += '<li><strong>' + labels[key] + ':</strong> <code>' + value + '</code></li>';
            });

            return html;
        };

        qz.networking.devices().then(function(data) {
            var list = '';

            for(var i = 0; i < data.length; i++) {
                var info = data[i];

                if (i == 0) {
                    list += "<li>" +
                        "   <strong>Hostname:</strong> <code>" + info.hostname + "</code>" +
                        "</li>" +
                        "<li>" +
                        "   <strong>Username:</strong> <code>" + info.username + "</code>" +
                        "</li>";
                }
                list += "<li>" +
                    "   <strong>Interface:</strong> <code>" + (info.name || "UNKNOWN") + (info.id ? "</code> (<code>" + info.id + "</code>)" : "</code>") +
                    "   <ul>" + listItems(info) + "</ul>" +
                    "</li>";
            }

            pinMessage("<strong>Network details:</strong><ul>" + list + "</ul>");
        }).catch(displayError);
    }

</script>
<% set_prints = ConfigPrinter.where(processo: 'FATURA').last %>
<script>  
        function QzComprovante(){
          qz.printers.find('EPSON LX-350 ESC/P (FACTURA)').then((found) => {
             var config = qz.configs.create('EPSON LX-350 ESC/P (FACTURA)');

            var printData = [

            '\x1B' + '\x40', // init
            '\x1B' + '\x4D' + '\x31', // normal text
            '\x1B' + '\x61' + '\x30', // left align

            '\x0A \x0A \x0A \x0A \x0A \x0A \x0A \x0A \x0A ',

            '<%= ''.to_s.ljust(65, ' ') %><%= @ft.doc_01 %>-<%= @ft.doc_02 %>-<%= @ft.doc %>/<%= @ft.cod_proc %>' + '\x0A',
            '<%= ''.to_s.ljust(40, ' ') %><%= @ft.data.strftime("%d").to_s.ljust(10, ' ') %> <%= l @ft.data, :format => :mes %> <%= ''.to_s.ljust(15, ' ') %>  <%= @ft.data.strftime("%Y").to_s.ljust(10, ' ') %>' + '\x0A \x0A',
            '<%= ''.to_s.ljust(10, ' ') %><%= @ft.persona_nome.to_s[0..28] %> <%= ' '.to_s.rjust(28, ' ') %>  <%= @ft.ruc %> \x0A',
            '<%= ''.to_s.ljust(10, ' ') %><%= @ft.persona.direcao %> - <%= @ft.persona.cidade.nome unless @ft.persona.cidade_id.blank? %> <%= ' '.to_s.rjust(45, ' ')%><%= @ft.persona.telefone %> \x0A',
            
            '<%= ''.to_s.ljust(40, ' ') %>' + '<% if @venda.tipo.to_i == 0 %>',
              '<%= 'X'.to_s.rjust(37, ' ') %>',
            '<% else %>',
              '<%= 'X'.to_s.rjust(45, ' ') %>',
            '<% end %>' + '\x0A \x0A',

            '<% qtd    = 0 %>',
            '<% tot_us = 0 %>',
            '<% tot_gs = 0 %>',
            '<% tot_rs = 0 %>',
            '<% tot_ex = 0 %>',
            '<% tot_05 = 0 %>',
            '<% tot_10 = 0 %>',

            '\x0A \x0A',

            '<% produtos_count = VendasProduto.find_by_sql('select count(id) from vendas_produtos where venda_id = ' + @venda.id.to_s ).first %>',

            '<% @venda.vendas_produtos.each do |vp|%>',
              '<%= (vp.produto_id.to_i).to_s.ljust(5, ' ') %>',
              '<%= (vp.quantidade.to_i).to_s.ljust(7, ' ') %>',
              '<%= vp.produto_nome.to_s.ljust(30, ' ').first(25) %>',
                '<%= format_int(vp.unitario_guarani.to_f).to_s.rjust(15, ' ') %>',
                '<% if vp.produto.taxa.to_i == 0 %>',
                  '<%= format_int(vp.total_guarani.to_f).to_s.rjust(4, ' ') %>',
                  '<%= '0'.to_s.rjust(10, ' ') %>',
                  '<%= '0'.to_s.rjust(18, ' ') %>',
                  '<% tot_ex += vp.total_guarani.to_f %>',

                '<% elsif vp.produto.taxa.to_i == 5 %>',

                  '<%= '0'.to_s.rjust(4, ' ') %>',
                  '<%= format_int(vp.total_guarani.to_f).to_s.rjust(10, ' ') %>',
                  '<%= '0'.to_s.rjust(18, ' ') %>',
                  '<% tot_05 += vp.total_guarani.to_f %>',

                '<% elsif vp.produto.taxa.to_i == 10 %>',
                  '<%= ''.to_s.rjust(4, ' ') %>',
                  '<%= ''.to_s.rjust(10, ' ') %>',
                  '<%= format_int(vp.total_guarani.to_f).to_s.rjust(18, ' ') %>',
                  '<% tot_10 += vp.total_guarani.to_f %>',
                '<% end %>',

              '\x0A',
              '<% qtd += vp.quantidade.to_i %>',
              '<% tot_gs += vp.total_guarani.to_f %>',
            '<% end %>',

            '<% min_prod = 14 %>',

            '<% altura = min_prod - produtos_count.count.to_i %>',

            '<% altura.times.each do |vp| %>',
              '\x0A',
            '<% end %>',
            '\x0A \x0A',

            '<%= format_int(tot_ex).to_s.to_s.rjust(60, ' ') %>',
            '<%= format_int(tot_05).to_s.to_s.rjust(12, ' ') %>',
            '<%= format_int(tot_10).to_s.to_s.rjust(12, ' ') %>',

            '\x0A',
            '\x0A',

            '<%= '   '.to_s.rjust(20, ' ') %>',
            '<%= I18n.with_locale(:es) { tot_gs.to_i.to_words.upcase.to_s[0..50].ljust(55, ' ')  } %>',
            '<%= format_int(tot_gs).rjust(7, ' ') %> \x0A',
            '<%= I18n.with_locale(:es) { tot_gs.to_i.to_words.upcase.to_s[51..70]  } %> \x0A ',

            '<%= format_int(tot_05.to_f / 21 ).to_s.rjust(25, ' ').ljust(25, ' ') %>',
            '<%= format_int(tot_10.to_f / 11 ).to_s.rjust(22, ' ').ljust(35, ' ') %>',
            '<%= format_int( (tot_05.to_f / 21) + (tot_10.to_f / 11) ).to_s.rjust(12, ' ').ljust(5, ' ') %>',
            '\x0A ',

            ];

                    
              return qz.print(config, printData);
          }).catch((e) => {
              alert(e);
          })
        };
        </script>

<a href="javascript:void(0)" class="btn btn-blue" onClick="QzComprovante()"><%= image_tag('printer.png') %> Imprimir Factura</a>